nest new <nome_projeto> | cria um diretório com as dependências necessárias do nest

npm run start | roda o projeto

providers | para services

controllers | para o controlador

imports

exports

nest g module user | criar um módulo

nest g controller user | criar um controller

nest g service user | cria um service

npm run star

npm run start:dev | atualizar a cada modificação

npm i bcryp | para criptografar

npm i -D @types/bcrypt | ajustes de criptografia
 
npm install --save typeorm pg @nestjs/typeorm | configurar .env - olhar a documentação do nest para isso

npm install @nestjs/cache-manager cache-manager | para usar o cache precisamos dessa dependência, para apoiar o uso é necessário o uso do CacheModule.register() no modulo da entidade desejada

npm i --save class-validator class-transformer | para criar validações do DTO

npx typeorm migration:create ./src/migration/create_table_user | para proteger as entidades criamos as tabelas manualmente

npm install cache-manager

npm install @nestjs/cache-manager cache-manager

npm install cache-manager@^5 @nestjs/cache-manager

npm install @nestjs/cache-manager cache-manager

npm i --save class-validator class-transformer

npm install --save @nestjs/passport passport passport-local
npm install --save-dev @types/passport-local

npm istall --save-dev @types/passport-jwt

npm install --save-dev @types/passport-jwt

npm install --save @nestjs/jwt


docker run --name another-postgres -e POSTGRES_PASSWORD=mysecretpassword -p 5435:5432 -d postgres


docker start another-postgres

{
	"accessToken": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidHlwZVVzZXIiOjEsImlhdCI6MTc0NTQ3MTIyMywiZXhwIjoxNzQ2MDc2MDIzfQ.rClcikZ9_4v3djYh_q7crR_SQOfqR_-dwnd9_4ClSII",
	"user": {
		"id": 1,
		"name": "Lucas Almeida",
		"email": "lucas.almeida@example.com",
		"phone": "83 98765-4321",
		"cpf": "123.456.789-00"
	}
}
